// ## 객체(object)와 가비지(garbage)
// - 객체와 가비지에 대한 개념을 이해하자!
//

package bitcamp.java100.ch02;

public class Test13_6 {

    public static void main(String[] args) {
// 배열의 주소를 저장하는 변수 => "레퍼런스"
        int[] arr1;

// new 명령으로 준비된 메모리 => "인스턴스(instance)" 또는 "객체(object)"라고 부른다.
        arr1 = new int[3];

// 새 배열 메모리를 만들어 arr1에 그 주소를 저장하면, 기존 배열의 주소는 잃어 버린다. 그러면 기존 배열 메모리는 사용할 수 없는 상태가 되는데, 이렇게 메모리만 차지하고 사용할 수 없는 인스턴스를 "가비지(garbage)"라 부른다.
        arr1 = new int[5];
    }
}

// ### Garbage
// - 주소를 잃어 버려 사용할 수 없는 상태의 인스턴스(객체)를 말한다.
// - "Dangling Object"라고도 부른다.
// 
// ### Garbage Collector
// - 가비지 메모리를 다시 사용할 수 있게 제거하는 내부 프로그램.
// - 언제 작업을 수행하는가?
//   => JVM이 사용할 메모리가 부족할 때, 
//      OS에 새 메모리를 요청하기 전에 먼저 자신의 메모리를 정리한다.
//   => CPU가 한가할 때,
//      24시간 365일 멈추지 않고 계속 실행되는 경우, CPU가 한가한 시점에 메모리 청소를 수행한다. 
//   => 그러나 대부분은 메모리가 부족할 때 가비지 컬렉터가 청소 작업을 수행한다.
//
// ### 가비지 컬렉터 방식의 문제점
// - 가비지 컬렉터가 메모리 청소를 수행할 때까지는 일정 시간동안 쓰지 못하는 상태의 메모리를 유지하게 된다. 즉 메모리를 완전히 효율적으로 사용하지 못한다.
// - 그러나 현대의 컴퓨터는 과거에 비해 메모리 비용이 싸기 때문에 비용 대비 관리 측면에서 이점이 있어서 이런 방식을 선호한다.
// - 즉 효율성을 줄이더라도 관리가 편리하다는 이점 때문에 이런 방식으로 메모리를 관리한다.   