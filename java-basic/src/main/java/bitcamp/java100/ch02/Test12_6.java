// ## 자바의 최소 연산 단위 
// - 자바의 최소 연산 단위에 대해 알아보자!
//

package bitcamp.java100.ch02;

public class Test12_6 {

    public static void main(String[] args) {
        byte b1 = 50;
        byte b2 = 50;
        byte b3;

// 4바이트 정수 리터럴(literal)인 경우, 메모리에 저장할 수 있다면 허락한다.
        b3 = 100;  //OK

// 리터럴과 리털럴의 연산 결과도 리터럴로 간주한다.
        b3 = 50 + 50; //OK
        
// 하지만 변수의 연산 결과에 대해서는 예외를 허락하지 않는다.
// => 왜냐하면 변수의 값은 언제든지 바뀔 수 있기 때문에
//    컴파일러는 변수의 값이 메모리에 들어갈 수 있다고 확신할 수 없다.
//        
// 또한 자바의 최소 연산 단위는 4바이트 int이다. 그래서 byte나 short 메모리의 값을 연산할 때는 일단 4바이트 int형 임시 메모리를 만든 다음에 그 값을 저장한 후 연산을 수행한다. 따라서 그 연산 결과는 당연히 4바이트 크기를 갖는다.
        //b3 = b1 + b2; // 컴파일 오류!
        
// 리터럴과 변수의 연산 결과도 그냥 일반 int 값으로 간주한다.
        //b3 = b1 + 50; // 컴파일 오류!

        
// byte 변수의 연산 결과는 int이다. 따라서 short 변수에 값을 저장할 수 없다.
        short s1;
        //s1 = b1 + b2; // 연산 결과는 int이다. 컴파일 오류!

// 결론!
// => 자바로 프로그래밍 할 때, 작은 정수 값을 다루더라도 그냥 4바이트 int 메모리를 사용하라!
// => 파일의 바이너리 데이터를 다룰 때만 byte 메모리를 사용한다.
    }
}

// ### 바이너리(binary) 파일
// - 특정 파일 형식으로 데이터가 저장된 파일을 말한다.
// - 파일을 읽고 쓰려며는 전용 프로그램이 필요하다.
// - 일반 텍스트 편집기로 편집할 수 없다.
// - 예) .gif, .jpeg, mp3, .hwp, .doc, .xls, .ppt, .exe, .class 등
//
// ### 텍스트(text) 파일
// - ASCII, ISO-8859-1, EUC-KR, MS949, Unicode, UTF-8 등 특정 charset 규칙에 따라 데이터가 저장된 파일을 말한다.
// - 일반 텍스트 편집기로 파일을 읽고 쓸 수 있다.
// - 전용 프로그램이 필요 없다.
// - 예) .html, .js, .css, .rtf, .xml, .properties, .java, .c, .cpp, .bat, .sh, .gradle, .project 등 
//
