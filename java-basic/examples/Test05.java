/* 소스 파일 분리하기 II
- Maven 프로젝트의 디렉토리 구조를 알아보자!
- 왜 Maven 프로젝트의 디렉토리 구조를 사용하는가?
 */
class Test05 {
  public static void main(String[] args) {
    System.out.println("안녕하세요!");
  }
}

/* Maven 프로젝트 디렉토리 구조
   $프로젝트폴더
      /src
        /main
          /java       <= 자바 소스 파일을 두는 폴더
          /resources  <= 프로그램 설정 파일을 두는 폴더
          /webapp     <= 웹 애플리케이션 관련 파일을 두는 폴더 
        /test
          /java       <= 자바 테스트 소스 파일을 두는 폴더
          /resources  <= 자바 테스트 관련 설정 파일을 두는 폴더
  이유?
  - 국제적으로 자바 프로젝트를 관리할 때 이 구조를 많이 사용한다.
  - 국제 표준.

  Gradle 빌드 도구를 이용하여 Maven 프로젝트 구조로 
  디렉토리를 자동 생성하기
  > gradle init --type java-application
  => Gradle 빌드 도구 관련 설정 파일들이 자동으로 생성된다.
  => 또한 Maven 프로젝트 구조에 맞춰서 폴더들이 자동생성된다.
  => 간단한 예제 파일이 자동 생성된 폴더에 저장된다.
  
  build.gradle
  => 자동으로 생성된 파일 중에서 개발자가 직접 손대는 파일
  => 이 파일에 빌드에 관련된 작업 내용을 기술한다.
  => 작업 명령은 groovy라는 언어를 사용해서 기술한다.
  => groovy는 자바 호환 언어이다. 즉 자바와 함께 사용할 수 있다.
  => 빌드 작업을 작성하는 자세한 사항은 문서를 보라!

  * 자바 호환 언어란?
  => 컴파일하면 .class 파일을 만드는 언어.
  => 바이너리 수준(bytecode 수준)에서 호환된다.
  => 자바로 만든 모든 코드를 100% 사용할 수 있고,
     자바에서도 호환 언어로 작성된 코드를 100% 사용할 수 있다.
  => 예) Scala, Groovy, Kotlin 등이 있다.
    
  Gradle을 이용하여 프로젝트를 빌드한다.
  > gradle build
  => 1) 의존하고 있는 외부 라이브러리를 자동으로 다운로드 받는다.
  => 2) build라는 폴더를 생성한다.
  => 3) build 폴더에 컴파일 된 파일들을 놓는다.
  => 4) 테스트 프로그램이 있으면 실행한다.

  라이브러리?
  - 개발자가 만든 코드들의 묶음
  - 보통 .jar 파일에 묶여서 배포된다.
  - JAR(Java ARchive)의 약자이다.
  - "archive"는 묶음을 의미한다.
  - 그런데 영어 사전에 "jar"라는 단어가 있다.
    의미는 "(꿀)단지"라는 뜻이 있어 묶음이라는 의미를 표현해 준다.
  - 압축을 할 때는 zip 알고리즘(압축공식)으로 압축한다.
    왜? zip 알고리즘은 특허로 등록되어 있지 않다.
  

*/