<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- @Component, @Controller, @Service, @Repository 애노테이션이 붙은 
         클래를 찾아 인스턴스를 생성한다. 
         물론 의존 객체도 주입해줄 것이다. -->
    <context:component-scan base-package="java100.app"/>


    <!-- 페이지 컨트롤러가 사용할 객체 설정 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!-- 클라이언트가 보낸 데이터의 Content-Type이 "application/json"일 때,  
                     "자바 객체"로 변환해주는 컨버터  
                     또한 요청 핸들러가 리턴한 자바 객체를 
                     "application/json" 형식의 문자열로 변환해주는 작업도 
                     함께 수행한다. -->
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
                
                <!-- 클라이언트가 보낸 데이터의 Content-Type이 "text/plain"일 때,
                     String으로 변환해주는 컨버터 -->
                <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    
    <!-- 멀티파트 형식으로 전송된 데이터를 처리할 객체를 등록한다. -->
    <bean id="multipartResolver" 
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5000000"/>
    </bean>
    
     
    <!-- 기본 ViewResolver를 교체한다. -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- mybatis의 SQL 실행 객체 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
          
        <!-- MapperScannerConfigurer를 사용할 경우,
             SQL 맵퍼 파일이 인터페이스와 같은 패키지에 있다면,
             맵퍼 파일의 위치를 따로 설정하지 않아도 된다.
             그러나 SQL 맵퍼 파일이 다른 패키지에 있다면,
             반드시 설정해야 한다. -->
        <property name="mapperLocations" value="classpath*:java100/app/dao/mysql/*Dao.xml"/>
        
        <property name="typeAliasesPackage" value="java100.app.domain"/> 
    </bean>    
    
    <!-- DB 커넥션 풀 역할을 수행할 DataSource 객체 -->
    <bean id="dataSource" 
          class="org.apache.commons.dbcp2.BasicDataSource" 
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <!-- 이 설정 파일에서 사용할 값이 들어 있는 
         프로퍼티 파일을 로딩하는 객체 등록 -->
    <context:property-placeholder location="classpath*:java100/app/jdbc.properties"/>
    
    <!-- DAO 객체를 자동생성해주는 공장 준비 
         => 다음 객체는 지정된 패키지에서 인터페이스를 찾는다.
         => 그리고 그 인터페이스와 대응하는 SQL Mapper를 찾아 
            DAO 객체를 자동으로 생성한다.
            이때 SQL Mapper 파일의 namespace는 
            인터페이스의 이름(패키지명 포함)과 일치해야 한다.
        -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="java100.app.dao" />
    </bean>
    
    <!-- 인터셉터를 등록한다. -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/auth/**"/>
            <bean class="java100.app.web.interceptor.AuthInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>















