자바 강의


기트허브 :  https://git-scm.com

Atom : https://atom.io/

REPL
read
evaluate
print
loop


jshell


Vim  ,   pix2code

* gradle  =>  gradle-4.2-bin   binary only
https://gradle.org/releases/   압축푼후  환경변수에 추가



* git 사용법

자격 삭제 : 사용자 계정 및 가족보호 => Windows 자격 증명 관리에서 git 제거


git> git config --global user.name "zerox7066"
git> git config --global user.email "zerox7066@gmail.com"


git init



@ github 복사

  - git clone /로컬/저장소/경로

  - git clone 사용자명@호스트:/원격/저장소/경로


  ex)  Clone or download 버튼 클릭

    git> git clone https://github.com/zerox7066/bitcamp.git


@ github 업로드

1. 로컬 저장소에 백업할 명단 작성 
   
   bitcamp> git add .      => 모든 파일 및 폴드

   bitcamp> git add <파일이름>


2. 로컬 저장소에 백업

   bitcamp> git commit -m '백업이유'
   bitcamp> git commit -m '.'

3. 서버의 원격 저장소에 업로드  =>  로그인 화면이 나타남
   >git push


@ github 다운로드
  
  java100> git pull




https://spring.io/



https://www.egovframe.go.kr


https://cs50.harvard.edu/


https://www.edx.org/professional-certificate/uc3mx-introduction-java-programming


http://mooc.org/



* github desktop용

https://desktop.github.com/


https://gradle.org/



빌게이츠 생각의 속도

스티브 잡스(보급판)

조너선 아이브

Refactoring



* 클래스 파일이 있는 경로로 classpath 설정

>set CLASSPATH=C:\workspace\java-basic\build\classes\java\main


* jar : 배포파일



* gradle 설치
  - 환경변수의 시스템 변수 - path에 gradle 압축푼 경로로 삽입
C:\gradle-4.2\bin  삽입


* gradle 생성
C:\workspace\java-basic\test>gradle init --type java-application

* gradle build
C:\workspace\java-basic\test>gradle build


* gradle run
C:\workspace\java-basic\test>gradle run


* gradle 컴파일
C:\workspace\java-basic\test>gradle compilejava


* gradle tasks



git scm

gradle


d2coding


구글 한중일 폰트

google noto fonts       South Korea


"editor.fontFamily": "D2Coding, Consolas"


80칸 준수




* gradlew run



* java-basic> java -cp .\build\classes\java\main bitcamp.java100.Test10




* Classpath 설정

java-basic> set CLASSPATH=.\build\classes\java\main

java-basic> java bitcamp.java100.Test10




https://docs.oracle.com/javase/8/docs/api/

http://docs.oracle.com/javase/9/docs/api/index.html?overview-summary.html



// java script Node.js 설치

https://nodejs.org/en/





// 자바 스크립트로 만든 모듈 설치 ( Node Package Modules ) : 크롬의 오픈소스 엔진
  - npm이란 Node Package Modules의 약자다. Node.js에서 사용가능한 모듈들을 패키지화시켜 모아놓은 것이다.

https://electron.atom.io/

아무폴더> npm install -g electron


java-basic> node     exit : ctrl + d


java-basic> jshell     exit : ctrl + d


@ 코드 알고리즘
https://codefights.com/




@  npm 사용   npm이란 Node Package Modules의 약자다.

https://github.com/eomcs/eomcs-codebook

git 다운로드

git> git clone https://github.com/eomcs/eomcs-codebook.git

* electron

git\eomcs-codebook> npm install


git\eomcs-codebook> npm start



call by value : 호출할 때 값을 넘김
call by reference : 호출할 때 주소를 넘김


Stack Memory : 로컬 변수는 스택 메모리에 생성
Heap Memory :  new 연산자를 통해 만든 배열과 사용자 정윽 객체는 Heap 영역에 생성














@ 배열 / 사용자 정의 for 문
public class Score {
    String name;
    int[] subjects = new int[3];
    int sum;
    float aver;
}

static void compute(Score score) {
    // 배열 for 문
    for (int sub : score.subjects) {
        score.sum += sub;
    }		
    score.aver = score.sum / 3f;
}

public static void main(String[] args) {
    Score[] scores = {new Score(), new Score(), new Score()};
    
    init(scores[0], "홍길동", 100, 90, 80);
    init(scores[1], "임꺽정", 80, 80, 80);
    init(scores[2], "유관순", 100, 100, 100);
    
    // 사용자 정의 객체 for 문
    for (Score s : scores) {
        Score.print(s);
    }
}


@ 메서드 리턴값이 타입이 다른 여러개의 값을 반환
java.util.ArrayList<String> list = new java.util.ArrayList<String>();
list.add("홍길동");
list.add("임꺽정");

java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>();
list.add(1);
list.add(2);

public class Test17_7 {
    // 타입이 다른 여러개의 값을 반환
    static java.util.ArrayList m1() {
        java.util.ArrayList list = new java.util.ArrayList();
        list.add("홍길동");
        list.add(20);
        list.add(false);
        list.add(4.12f);
        list.add('M');

        // 객체(상자)를 리턴하는 것이 아니라, 객체의 주소를 리턴한다.
        return list;
    }
    
    public static void main(String[] args) {
        java.util.ArrayList a = m1();
        
        // ArrayList 에서 for 문
        for (Object v : a) {
            System.out.println(v);
        }
        System.out.println("--------------------------------------------------");
    }
}


@ 배열 Length을 이용하는 방법
for (int i = 0; i < scores.length; i++) {
    for (int j = 0; j < scores[i].arr1.length; j++) {
        for (int k = 0; k < scores[i].arr1[j].length; k++) {
            System.out.printf("%4s, %4d, %4d, %4d, %4d, %5.1f, %-4d\n",
            scores[i].name, scores[i].kor, scores[i].eng, scores[i].math, 
            scores[i].sum, scores[i].aver, scores[i].arr1[j][k]);
        }
    }
}


java.util.HashSet<String> set = new java.util.HashSet<String>();
set.add("홍길동");
set.add("임꺽정");
for (String n : set) {
    System.out.println(n);
}

String[] names = {"홍길동", "임꺽정", "유관순", "안중근", "윤봉길"};
for (String n : names) 
    System.out.println(n);

int[] kor = {100, 90, 80, 90, 50, 80};
for (int score : kor) {
    System.out.println(score);
}


//: 메모리 준비 값 저장
static Score createScore(String name, int kor, int eng, int math) {        
    //: 메모리 준비
    Score s = new Score();
    
    //: 메모리에 데이타 넣기
    s.name = name;
    s.kor = kor;
    s.eng = eng;
    s.math = math;
    s.sum = s.kor + s.eng + s.math;
    s.aver = s.sum /3f;
    
    //: 메모리 주소 리턴
    return s;
}

static void m1(int... values) {
    System.out.printf("아규먼트 갯수 : %d\n", values.length);
    for (int v : values) {
        System.out.println(v);
    }
    System.out.println("--------------------------------------------------");
}



mutable
immutable

@ String Class
  8이하는 private final char value[];
  9에서는 private final byte[] value;

